# Snippets for nixos and nix in general

priority -10

# Generate a shell.nix boilerplate
snippet shell "shell.nix boilerplate"
{ pkgs ? import <nixpkgs> {} }:
pkgs.mkShell {
	# buildInputs is for dependencies you'd need "at run time",
	# were you to to use nix-build not nix-shell and build whatever you were working on
	buildInputs = [
		pkgs.hello
	];

	shell = pkgs.zsh;
}
endsnippet

# Generate a default.nix boilerplate
snippet default "default.nix boilerplate"
{ pkgs ? import <nixpkgs> {} }:
pkgs.stdenv.mkDerivation rec {
	name = "my-package";
	src = ./.;
	buildInputs = [ pkgs.hello ];
}
endsnippet

# Generate a flake.nix boilerplate
snippet flake "flake.nix boilerplate"
{
  description = "New flake";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos";
    utils.url = "github:numtide/flake-utils";
  };
  outputs = { self, nixpkgs, utils }: 
    utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs { inherit system; };
      in {
        # checks = {
        #   fmt = pkgs.runCommand "check-fmt" {} ''
        #     ${lib.getExe formatter} --check ${./.}
        #     touch $out
        #   '';
        # };

        devShells.default = pkgs.mkShell {
          packages = with pkgs; [
            hello
          ];
        };

        packages = {
          default = pkgs.hello;
        };
    });
}
endsnippet

# Generate a nix module boilerplate
snippet module "nix module boilerplate"
{ config, pkgs, lib, ... }:
{
	environment.systemPackages = [
	];
}
endsnippet

## LANGUAGE SPECIFIC SNIPPETS
snippet nodesh "nodejs package shell"
	buildInputs = [ 
		pkgs.nodejs
		(pkgs.yarn.override { nodejs = pkgs.nodejs; })
	];
endsnippet

# Generate a shell.nix boilerplate
snippet javash "java shell.nix boilerplate"
{ pkgs ? import <nixpkgs> {} }:
  pkgs.mkShell {
    buildInputs = [
      pkgs.jdk17
      pkgs.maven
    ];

    shell = pkgs.zsh;

    shellHook = ''
      export JAVA_HOME=${pkgs.jdk17}
      PATH="${pkgs.jdk17}/bin:$PATH"
    '';
  }
endsnippet


# Generate a shell.nix boilerplate
snippet flakeout "flake output"
  outputs = { self, nixpkgs, ... }:
    let
      lib = nixpkgs.lib;
      recursiveMergeAttrs = listOfAttrsets: lib.fold (attrset: acc: lib.recursiveUpdate attrset acc) {} listOfAttrsets;
      systems = [ "x86_64-linux" "aarch64-linux" "x86_64-darwin" "aarch64-darwin" ];

      systemPackages = map (system:
        let
          pkgs = import nixpkgs { inherit system; };
        in
        {
          packages."${system}".funzzy = pkgs.callPackage ./nix/package.nix {};

          devShells."${system}".default = pkgs.mkShell {
            packages = with pkgs; [
              hello
            ];
          };
        }
      ) systems;
    in
      # Reduce the list of packages of packages into a single attribute set
      recursiveMergeAttrs(systemPackages);
endsnippet
