snippet impr "Import react (js)"
	import React from 'react'; $0

snippet imps "Import shallow enzyme (js)"
	import { shallow } from 'enzyme'; $0

snippet impm "Import mount enzyme (js)"
	import { mount } from 'enzyme'; $0

snippet imrt "Import render from testing library (js)"
	import { render } from 'testing-library'; $0

snippet impp "Import proptypes (js)"
	import PropTypes from 'prop-types'; $0

snippet dess "Describe (js)"
	describe('${1:description}', () => {
		$0
	});

snippet itt "it (js)"
	it('${1:description}', () => {
		$0
	});

snippet beff "before each (js)"
	beforeEach(() => {
		$0
	});

snippet aftt "after each (js)"
	afterEach(() => {
		$0
	});

snippet befaa "before all (js)"
	beforeAll(() => {
		$0
	});

snippet aftaa "after all (js)"
	afterAll(() => {
		$0
	});

snippet tsha "shallow test (js)"
  const props = {};

  const component = shallow(<${1:component} {...props}/>)

  expect(component).toEqual('')

snippet tmou "mount test (js)"
  const props = {};

  const component = mount(<${1:component} {...props}/>)

  expect(component).toEqual('')

snippet tren "render testing (js)"
	const props = {...defaultProps};

	const wrapper = render(<${1:component} {...props}/>)

	expect(wrapper).toEqual('')

snippet trc "test react component (js)"
	import React from 'react';
	import { render } from 'testing-library';

	import { $1 } from './${2:$1}';

	describe('${3:$1}', () => {
		const defaultProps = {};

		it('$4', () => {
			const props = {...defaultProps};

			const wrapper = render(<${5:$1} {...props}/>)

			expect(wrapper).toEqual('')
		});
	});

snippet tgc "test generic component (js)"
	import { render } from 'testing-library';

	import $1 from './${2:$1}';

	describe('${3:$1}', () => {
		const defaultProps = {};

		it('$4', () => {
			const props = {...defaultProps};

			const wrapper = render(<${5:$1} {...props}/>)

			expect(wrapper).toEqual('')
		});
	});

snippet wfgt "wrapper get by text"
	wrapper.getByText('${0}')

snippet wfglt "wrapper get by label text"
	wrapper.getByLabelText('${0}')

snippet rspr "render and spread result"
	const { container, getByText, getBy } = render(<${0} />)

snippet cfds "component find data-selector"
	component.find('[data-selector="${0}"]')

snippet cffm "component find field name"
	component.find('[name="${0}"]')

snippet etms "expect to match snapshot"
	expect(component).toMatchSnapshot()

snippet cmbind "class method binding"
	this.$1 = this.${2:$1}.bind(this)
